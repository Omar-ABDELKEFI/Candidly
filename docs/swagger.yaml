basePath: /api
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.Answer:
    properties:
      candidat_id:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      point:
        type: integer
      test_id:
        type: integer
      updatedAt:
        type: string
    required:
    - candidat_id
    - point
    - test_id
    type: object
  models.NotifyEmails:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      testId:
        type: integer
      updatedAt:
        type: string
    required:
    - email
    type: object
  models.Question:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      difficulty:
        type: string
      expected_time:
        type: integer
      file_read_me:
        type: string
      id:
        type: integer
      name:
        type: string
      points:
        type: integer
      question_text:
        type: string
      skill_id:
        type: integer
      test_questions:
        items:
          $ref: '#/definitions/models.TestQuestion'
        type: array
      type:
        type: string
      updatedAt:
        type: string
    required:
    - difficulty
    - expected_time
    - name
    - points
    type: object
  models.Test:
    properties:
      archived:
        type: boolean
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      notifyEmails:
        items:
          $ref: '#/definitions/models.NotifyEmails'
        type: array
      passingScore:
        type: integer
      showScore:
        type: boolean
      test_questions:
        items:
          $ref: '#/definitions/models.TestQuestion'
        type: array
      testCondidat:
        items:
          $ref: '#/definitions/models.TestCondidat'
        type: array
      timingPolicy:
        type: string
      updatedAt:
        type: string
    required:
    - archived
    - description
    - name
    - passingScore
    - showScore
    - timingPolicy
    type: object
  models.TestCondidat:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      question_id:
        type: integer
      test_id:
        type: integer
      updatedAt:
        type: string
    required:
    - question_id
    - test_id
    type: object
  models.TestQuestion:
    properties:
      answer:
        items:
          $ref: '#/definitions/models.Answer'
        type: array
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      question_id:
        type: integer
      test_id:
        type: integer
      updatedAt:
        type: string
    required:
    - question_id
    - test_id
    type: object
info:
  contact: {}
  description: is an application web of interview assessment tests for interviewing
    out of the box .
  title: tekab-test
  version: "1.0"
paths:
  /questions:
    get:
      consumes:
      - application/json
      description: find a question by type or difficulty
      parameters:
      - description: question search by type
        in: query
        name: type
        type: string
      - description: question search by difficulty
        in: query
        name: difficulty
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Question'
            type: array
      summary: find a question
      tags:
      - question
  /questions/edit:
    post:
      consumes:
      - application/json
      description: create new question by json
      parameters:
      - description: Add question
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/models.Question'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Question'
      summary: add new  question
      tags:
      - question
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
