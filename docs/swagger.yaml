basePath: /api
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.Answer:
    properties:
      answer_choices:
        items:
          $ref: '#/definitions/models.AnswerChoices'
        type: array
      answer_file:
        type: string
      answer_text:
        type: string
      candidate_id:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      point:
        type: number
      question_id:
        type: integer
      test_id:
        type: integer
      updatedAt:
        type: string
    required:
    - question_id
    type: object
  models.AnswerChoices:
    properties:
      answer_id:
        type: integer
      choices_id:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      updatedAt:
        type: string
    required:
    - choices_id
    type: object
  models.Candidate:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      test:
        items:
          $ref: '#/definitions/models.Test'
        type: array
    type: object
  models.CandidateRequest:
    properties:
      email:
        type: string
      name:
        type: string
      test:
        items:
          $ref: '#/definitions/models.TestResponse'
        type: array
    type: object
  models.CandidateResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      test:
        items:
          $ref: '#/definitions/models.Test'
        type: array
    type: object
  models.Choices:
    properties:
      choice_text:
        type: string
      is_answer:
        type: boolean
    required:
    - choice_text
    - is_answer
    type: object
  models.CloneTestInput:
    properties:
      expected_time:
        type: integer
    type: object
  models.CreateQuestionInput:
    properties:
      choices:
        items:
          $ref: '#/definitions/models.Choices'
        type: array
      difficulty:
        type: string
      expected_time:
        type: integer
      file_read_me:
        type: string
      max_points:
        type: number
      name:
        type: string
      question_text:
        type: string
      skill_id:
        type: integer
      skill_name:
        type: string
      type:
        type: string
    required:
    - difficulty
    - expected_time
    - max_points
    - name
    - question_text
    - skill_name
    type: object
  models.CreateSkillInput:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  models.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.MyTests:
    properties:
      expected_time:
        type: integer
      number_Question:
        type: integer
      number_candidate:
        type: integer
      test_id:
        type: integer
      test_name:
        type: string
    type: object
  models.Question:
    properties:
      answer:
        items:
          $ref: '#/definitions/models.Answer'
        type: array
      choices:
        items:
          $ref: '#/definitions/models.Choices'
        type: array
      difficulty:
        type: string
      expected_time:
        type: integer
      file_read_me:
        type: string
      id:
        type: integer
      max_points:
        type: number
      name:
        type: string
      question_text:
        type: string
      skill:
        $ref: '#/definitions/models.Skill'
      skill_id:
        type: integer
      test:
        items:
          $ref: '#/definitions/models.Test'
        type: array
      test_questions:
        items:
          $ref: '#/definitions/models.TestQuestion'
        type: array
      type:
        type: string
    required:
    - name
    - question_text
    type: object
  models.Skill:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.SkillsResponse:
    properties:
      ID:
        type: integer
      name:
        type: string
    required:
    - ID
    - name
    type: object
  models.StartTest:
    properties:
      created_at:
        type: string
      current_question:
        type: integer
      email:
        type: string
      name:
        type: string
      questions:
        items:
          $ref: '#/definitions/models.StartTestQuestions'
        type: array
      score:
        type: number
      test_status:
        type: string
      time_limit:
        type: integer
      updated_at:
        type: string
    type: object
  models.StartTestQuestions:
    properties:
      expected_time:
        type: integer
      name:
        type: string
      type:
        type: string
    type: object
  models.Test:
    properties:
      archived:
        type: boolean
      candidate:
        items:
          $ref: '#/definitions/models.Candidate'
        type: array
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      notify_emails:
        type: string
      passing_score:
        type: integer
      questions:
        items:
          $ref: '#/definitions/models.Question'
        type: array
      show_score:
        type: boolean
      time_limit:
        type: integer
      timing_policy:
        type: string
    type: object
  models.TestCandidate:
    properties:
      answer:
        items:
          $ref: '#/definitions/models.Answer'
        type: array
      candidate_id:
        type: integer
      current_question:
        type: integer
      score:
        type: number
      test_id:
        type: integer
      test_status:
        type: string
    required:
    - candidate_id
    - test_id
    type: object
  models.TestQuestion:
    properties:
      id:
        type: integer
      question_id:
        type: integer
      test_id:
        type: integer
    required:
    - question_id
    type: object
  models.TestQuestionDelete:
    properties:
      question_id:
        type: integer
      test_id:
        type: integer
    required:
    - question_id
    - test_id
    type: object
  models.TestRequest:
    properties:
      archived:
        type: boolean
      description:
        type: string
      name:
        type: string
      notify_emails:
        type: string
      passing_score:
        type: integer
      show_score:
        type: boolean
      timing_policy:
        type: string
    type: object
  models.TestResponse:
    properties:
      archived:
        type: boolean
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      notify_emails:
        type: string
      passing_score:
        type: integer
      show_score:
        type: boolean
      timing_policy:
        type: string
    type: object
  models.TestsCandidatesResponse:
    properties:
      candidate_email:
        type: string
      candidate_name:
        type: string
      score:
        type: number
      test_candidate_id:
        type: string
      test_name:
        type: string
      test_status:
        type: string
    type: object
  models.UpdateCurrentQuestion:
    properties:
      current_question:
        type: integer
    type: object
  models.UpdateCurrentQuestionOutput:
    properties:
      current_question:
        type: integer
      updated_at:
        type: string
    type: object
  models.UpdateTestStatus:
    properties:
      test_status:
        type: string
    type: object
  models.UpdateTestStatusOutput:
    properties:
      test_status:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact: {}
  description: this is an application web of interview assessment tests for interviewing
    out of the box .
  title: tekab-test
  version: "1.0"
paths:
  /answers/{idTestCandidate}:
    post:
      consumes:
      - application/json
      description: create new Answer by json
      parameters:
      - description: Add Answer
        in: body
        name: Answer
        required: true
        schema:
          $ref: '#/definitions/models.Answer'
      - description: idTestCandidate
        in: path
        name: idTestCandidate
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Answer'
      summary: add new Answer
      tags:
      - Answer
  /candidate:
    post:
      consumes:
      - application/json
      description: create new Candidate by json
      parameters:
      - description: candidate data
        in: body
        name: candidate
        required: true
        schema:
          items:
            $ref: '#/definitions/models.CandidateRequest'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CandidateResponse'
      summary: add new  Candidate
      tags:
      - Candidate
  /login:
    post:
      consumes:
      - application/json
      description: Login to the app
      parameters:
      - description: Login
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Login to the app
      tags:
      - Login
  /my-tests:
    post:
      consumes:
      - application/json
      description: create new Test by json
      parameters:
      - description: Add Test
        in: body
        name: Test
        required: true
        schema:
          $ref: '#/definitions/models.Test'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TestResponse'
      summary: add new Test
      tags:
      - test
  /my-tests/{id}:
    get:
      description: get test by id
      operationId: getTest
      parameters:
      - description: test id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MyTests'
      summary: get test by id
      tags:
      - test
  /my-tests/{id}/questions:
    post:
      consumes:
      - application/json
      description: add a question to test by json
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Add question to test
        in: body
        name: test_question
        required: true
        schema:
          $ref: '#/definitions/models.TestQuestion'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TestQuestion'
      summary: add a question to test
      tags:
      - question_test
  /my-tests/{test_id}:
    post:
      consumes:
      - application/json
      description: update Test by json and path
      operationId: updateTest
      parameters:
      - description: Update Test
        in: body
        name: Test
        required: true
        schema:
          $ref: '#/definitions/models.TestRequest'
      - description: Update Test
        in: path
        name: test_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TestResponse'
      summary: update Test
      tags:
      - test
  /my-tests/candidates/:test_id:
    post:
      consumes:
      - application/json
      description: create test_candidate by json and path
      parameters:
      - description: Add candidate
        in: path
        name: test_id
        required: true
        type: integer
      - description: Add candidate
        in: body
        name: test_candidate
        required: true
        schema:
          $ref: '#/definitions/models.TestCandidate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TestCandidate'
      summary: add new  test_candidate
      tags:
      - test_candidate
  /my-tests/clone/{id}:
    post:
      description: clone test
      operationId: cloneTest
      parameters:
      - description: test id
        in: path
        name: id
        required: true
        type: string
      - description: expected Time
        in: body
        name: expectedTime
        required: true
        schema:
          $ref: '#/definitions/models.CloneTestInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MyTests'
      summary: clone a test
      tags:
      - test
  /my-tests/getTest:
    get:
      description: get my-tests
      operationId: getMyTests
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MyTests'
      summary: update Test
      tags:
      - test
  /my-tests/questions/delete:
    delete:
      consumes:
      - application/json
      description: delete a question from test by json
      parameters:
      - description: test_question
        in: body
        name: test_question
        required: true
        schema:
          $ref: '#/definitions/models.TestQuestionDelete'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: delete a question from test
      tags:
      - question_test
  /questions:
    get:
      consumes:
      - application/json
      description: find a question by type or difficulty
      parameters:
      - description: question search by type
        in: query
        name: type
        type: string
      - description: question search by difficulty
        in: query
        name: difficulty
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Question'
            type: array
      summary: find a question
      tags:
      - question
  /questions/edit:
    post:
      consumes:
      - application/json
      description: create new question by json
      parameters:
      - description: Add question
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/models.CreateQuestionInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Question'
      summary: add new  question
      tags:
      - question
  /quiz/{idTestCandidate}:
    get:
      consumes:
      - application/json
      description: get questions of a test
      parameters:
      - description: idTestCandidate
        in: path
        name: idTestCandidate
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Question'
            type: array
      security:
      - Authorization: []
      summary: get tests candidates
      tags:
      - test
  /quiz/currentQuestion/{idTestCandidate}:
    patch:
      consumes:
      - application/json
      description: Update current question
      parameters:
      - description: idTestCandidate
        in: path
        name: idTestCandidate
        required: true
        type: string
      - description: current question
        in: body
        name: currentQuestion
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCurrentQuestion'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdateCurrentQuestionOutput'
      summary: Update current question
  /quiz/status/{idTestCandidate}:
    patch:
      consumes:
      - application/json
      description: Update test status
      parameters:
      - description: idTestCandidate
        in: path
        name: idTestCandidate
        required: true
        type: string
      - description: test status
        in: body
        name: testStatus
        required: true
        schema:
          $ref: '#/definitions/models.UpdateTestStatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdateTestStatusOutput'
      summary: Update test status
  /score/{idTestCandidate}:
    post:
      consumes:
      - application/json
      description: calculate score by path  and update a status test
      parameters:
      - description: idTestCandidate
        in: path
        name: idTestCandidate
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TestCandidate'
      summary: calculate a test score
      tags:
      - test_candidate
  /skill:
    post:
      consumes:
      - application/json
      description: create new skill by json
      parameters:
      - description: Add Skill
        in: body
        name: skill
        required: true
        schema:
          $ref: '#/definitions/models.CreateSkillInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Skill'
      summary: add new  skill
      tags:
      - skill
  /skills:
    get:
      consumes:
      - application/json
      description: get all skills
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SkillsResponse'
            type: array
      security:
      - Authorization: []
      summary: get skills
      tags:
      - skill
  /startTest/{idTestCandidate}:
    get:
      description: get test information
      operationId: StartTest
      parameters:
      - description: idTestCandidate
        in: path
        name: idTestCandidate
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.StartTest'
            type: array
      security:
      - Authorization: []
      summary: get test information
      tags:
      - test_candidate
  /tests:
    get:
      consumes:
      - application/json
      description: get tests by skill
      parameters:
      - description: tests search by type
        in: query
        name: type
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TestResponse'
            type: array
      security:
      - Authorization: []
      summary: get tests
      tags:
      - test
  /testsCandidates:
    get:
      consumes:
      - application/json
      description: get candidates and their tests
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TestsCandidatesResponse'
            type: array
      security:
      - Authorization: []
      summary: get candidates and their tests
      tags:
      - test_candidate
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
